// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Just some things that need to be made first
    Not16(
        in[0]=zx,
        in[1]=zx,
        in[2]=zx,
        in[3]=zx,
        in[4]=zx,
        in[5]=zx,
        in[6]=zx,
        in[7]=zx,
        in[8]=zx,
        in[9]=zx,
        in[10]=zx,
        in[11]=zx,
        in[12]=zx,
        in[13]=zx,
        in[14]=zx,
        in[15]=zx,
        out=zxNot
    );
    Not16(
        in[0]=zy,
        in[1]=zy,
        in[2]=zy,
        in[3]=zy,
        in[4]=zy,
        in[5]=zy,
        in[6]=zy,
        in[7]=zy,
        in[8]=zy,
        in[9]=zy,
        in[10]=zy,
        in[11]=zy,
        in[12]=zy,
        in[13]=zy,
        in[14]=zy,
        in[15]=zy,
        out=zyNot
    );

    // First, if we need to, zero out the x and y inputs
    And16(a=x, b=zxNot, out=xIfZeroed);
    And16(a=y, b=zyNot, out=yIfZeroed);

    // Then, negate them if needed, according to nx and ny
    Xor16(
        a=xIfZeroed,
        b[0]=nx,
        b[1]=nx,
        b[2]=nx,
        b[3]=nx,
        b[4]=nx,
        b[5]=nx,
        b[6]=nx,
        b[7]=nx,
        b[8]=nx,
        b[9]=nx,
        b[10]=nx,
        b[11]=nx,
        b[12]=nx,
        b[13]=nx,
        b[14]=nx,
        b[15]=nx,
        out=xIfNegated
    );

    // Now, negate y if needed (according to ny)
    Xor16(
        a=yIfZeroed,
        b[0]=ny,
        b[1]=ny,
        b[2]=ny,
        b[3]=ny,
        b[4]=ny,
        b[5]=ny,
        b[6]=ny,
        b[7]=ny,
        b[8]=ny,
        b[9]=ny,
        b[10]=ny,
        b[11]=ny,
        b[12]=ny,
        b[13]=ny,
        b[14]=ny,
        b[15]=ny,
        out=yIfNegated
    );
    
    // Now, add the two numbers
    Add16(
        a=xIfNegated,
        b=yIfNegated,
        out=xySum,
    );

    // Now take the bitwise and of xIfNegated and yIfNegated
    And(
        a=xIfNegated,
        b=yIfNegated,
        out=xyAnd
    );

    // Mux them together depending on f
    Mux16(
        a=xyAnd,
        b=xySum,
        sel=f,
        out=result,
    );
    
    // Negate if needed
    Xor16(
        a=result,
        b[0]=no,
        b[1]=no,
        b[2]=no,
        b[3]=no,
        b[4]=no,
        b[5]=no,
        b[6]=no,
        b[7]=no,
        b[8]=no,
        b[9]=no,
        b[10]=no,
        b[11]=no,
        b[12]=no,
        b[13]=no,
        b[14]=no,
        b[15]=no,
        out=out
    );

    // Set ng and zr
    And(
        a=out[15],
        b=true,
        out=ng
    );
    
    Or8Way(
        in[0]=out[0],
        in[1]=out[1],
        in[2]=out[2],
        in[3]=out[3],
        in[4]=out[4],
        in[5]=out[5],
        in[6]=out[6],
        in[7]=out[7],
        out=outOr1
    );

    Or8Way(
        in[0]=out[8],
        in[1]=out[9],
        in[2]=out[10],
        in[3]=out[11],
        in[4]=out[12],
        in[5]=out[13],
        in[6]=out[14],
        in[7]=out[15],
        out=outOr2
    );

    Or(
        a=outOr1,
        b=outOr2,
        out=zrNot
    );

    Not(
        in=zrNot,
        out=zr
    );
}