// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    /* REGISTERS */

    // The program counter, storing the address of the next instruction to be executed.
    // It takes the current program address from the A register, which holds the address
    // of the next instruction.
    PC(in=AOut, load=PCLoad, inc=true, reset=reset, out[0..14]=pc);

    // The A register, storing data that can point to an address in memory.
    ARegister(in=AIn, load=ALoad, out=AOut, out[0..14]=addressM);

    // The D register, storing arbitrary data for an instruction or two.
    DRegister(in=ALUOut, load=DLoad, out=DOut);

    /* DECODING */

    // Values to use for later
    // Is this instruction an A instruction?
    Not(in=instruction[15], out=isAInstruction);

    // Decode what value to load into the A register:
    // If the instruction is not an A instruction (AKA C instruction, instruction[15]==1), then load the value of the ALU into the A register.
    // If the instruction is an A instruction (instruction[15]==0), then load the value of the instruction into the A register.
    Mux16(a=ALUOut, b=instruction, sel=isAInstruction, out=AIn);

    // Decode if the A register should load:
    // If the instruction is a A instruction (instruction[15]==0), or the destination is set to A (instruction[5]==1), then load A.
    Or(a=isAInstruction, b=instruction[5], out=ALoad);

    // Decode if the D register should load:
    // If the instruction is a C instruction (instruction[15]==1), and the destination is set to D (instruction[4]==1), then load D.
    And(a=instruction[15], b=instruction[4], out=DLoad);

    // Decode if Memory should load:
    // If the instruction is a C instruction (instruction[15]==1), and the destination is set to M (instruction[3]==1), then load M.
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Decode the jumps:
    // We should jump if all requirements are set:
    // 1. The instruction is a C instruction (instruction[15]==1)
    // 2. Jump bits are set.
    // 3. Respective computations for the jump bits return true.

    // Extra stuff we have to check for: if the ALU is positive.
    Not(in=ALUIsZero, out=ALUIsNotZero);
    Not(in=ALUIsNeg, out=ALUIsNotNeg);
    And(a=ALUIsNotZero, b=ALUIsNotNeg, out=ALUIsPos);

    // Check the respective jump bits:
    And(a=instruction[2], b=ALUIsZero, out=jumpIfNeg);
    And(a=instruction[1], b=ALUIsNeg, out=jumpIfZero);
    And(a=instruction[0], b=ALUIsPos, out=jumpIfPos);

    // Check if we should jump:
    Or(a=jumpIfNeg, b=jumpIfZero, out=jumpIfNegOrZero);
    Or(a=jumpIfNegOrZero, b=jumpIfPos, out=canJump);

    // Decode if the PC should load:
    // REMEMBER: Only jump if it's a C instruction!
    And(a=instruction[15], b=canJump, out=PCLoad);

    /* ALU */

    // Get either A or M as input:
    // If the A bit is not set (instruction[12]==1), we use the A register as input to the ALU.
    // If the A bit is set (instruction[12]==0), then use the memory input as the input to the ALU.
    Mux16(a=inM, b=AOut, sel=instruction[12], out=ALUMAIn);

    // The ALU, performing the computation of the C instruction.
    // Instruction bits 6-11 are the control bits for the ALU, mapping directly to the ALU control bits.
    ALU(x=DOut, y=ALUMAIn, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, zr=ALUIsZero, ng=ALUIsNeg);
}