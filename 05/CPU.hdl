// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // The program counter, storing the address of the next instruction to be executed.
    // It takes the program from the A register, which holds the address of the next 
    // instruction.
    PC(in=A_out, load=_, inc=true, reset=reset, out=pc);

    // The A register, storing data that can point to an address in memory.
    ARegister(in=A_in, load=A_load, out=A_out, out=addressM);

    // The D register, storing arbitrary data for an instruction or two.
    DRegister(in=ALU_out, load=D_load, out=D_out);

    /* DECODING */

    // Decode if the D register should load:
    // If the instruction is a C instruction, and the destination is set to D, then load D.
    And(a=instruction[15], b=instruction[4], out=D_load);

    // Decode the A/M input to the ALU:
    // If the A bit is set, or if this is an A instruction, set the A/M input to the ALU to the A input.
    Or(a=instruction[12], b=instruction[15], out=ALU_MA_sel);
    

    /* ALU */
    // If the a bit is set, then use the A register as the input to the ALU.
    Mux(a=inM, b=A_out, sel=ALU_MA_sel, out=ALU_MA_in);

    // The ALU, performing the computation of the C instruction.
    ALU(x=D_out, y=ALU_MA_in, zx=instruction[6], nx=instruction[7], zy=instruction[8], ny=instruction[9], f=instruction[10], no=instruction[11], out=ALU_out, zr=ALU_is_zero, ng=ALU_is_neg);
}